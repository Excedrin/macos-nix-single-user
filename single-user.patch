diff -uwr nix/unpack/nix-2.25.2-aarch64-darwin/install nix/unpack/nix-2.25.2-aarch64-darwin/install
--- nix/unpack/nix-2.25.2-aarch64-darwin/install	1969-12-31 16:00:00
+++ nix/unpack/nix-2.25.2-aarch64-darwin/install	2024-11-26 11:47:50
@@ -41,12 +41,12 @@
     echo "Note: a multi-user installation is possible. See https://nixos.org/manual/nix/stable/installation/installing-binary.html#multi-user-installation" >&2
 fi
 
-case "$(uname -s)" in
-    "Darwin")
-        INSTALL_MODE=daemon;;
-    *)
-        INSTALL_MODE=no-daemon;;
-esac
+#case "$(uname -s)" in
+#    "Darwin")
+#        INSTALL_MODE=daemon;;
+#    *)
+#        INSTALL_MODE=no-daemon;;
+#esac
 
 # space-separated string
 ACTIONS=
@@ -59,11 +59,11 @@
             ACTIONS="${ACTIONS}install "
             ;;
         --no-daemon)
-            if [ "$(uname -s)" = "Darwin" ]; then
-                printf '\e[1;31mError: --no-daemon installs are no-longer supported on Darwin/macOS!\e[0m\n' >&2
-                exit 1
-            fi
-            INSTALL_MODE=no-daemon
+        #    if [ "$(uname -s)" = "Darwin" ]; then
+        #        printf '\e[1;31mError: --no-daemon installs are no-longer supported on Darwin/macOS!\e[0m\n' >&2
+        #        exit 1
+        #    fi
+        #    INSTALL_MODE=no-daemon
             # intentional tail space
             ACTIONS="${ACTIONS}install "
             ;;
@@ -126,10 +126,14 @@
     shift
 done
 
+
 if [ "$INSTALL_MODE" = "daemon" ]; then
     printf '\e[1;31mSwitching to the Multi-user Installer\e[0m\n'
     exec "$self/install-multi-user" $ACTIONS # let ACTIONS split
     exit 0
+else
+  echo "Setup the /nix volume"
+  "$self/install-multi-user" setup-disk
 fi
 
 if [ "$(id -u)" -eq 0 ]; then
diff -uwr nix/unpack/nix-2.25.2-aarch64-darwin/install-multi-user nix/unpack/nix-2.25.2-aarch64-darwin/install-multi-user
--- nix/unpack/nix-2.25.2-aarch64-darwin/install-multi-user	1969-12-31 16:00:00
+++ nix/unpack/nix-2.25.2-aarch64-darwin/install-multi-user	2024-11-26 11:47:50
@@ -23,7 +23,7 @@
 # installer allows overriding build user count to speed up installation
 # as creating each user takes non-trivial amount of time on macos
 readonly NIX_USER_COUNT=${NIX_USER_COUNT:-32}
-readonly NIX_BUILD_GROUP_NAME="nixbld"
+NIX_BUILD_GROUP_NAME="nixbld"
 # each system specific installer must set these:
 #   NIX_FIRST_BUILD_UID
 #   NIX_BUILD_GROUP_ID
@@ -686,6 +686,69 @@
           install -dv -m 0555 /etc/nix
 }
 
+create_directories_single() {
+    # FIXME: remove all of this because it duplicates LocalStore::LocalStore().
+    task "Setting up the basic directory structure"
+    if [ -d "$NIX_ROOT" ]; then
+        # if /nix already exists, take ownership
+        #
+        # Caution: notes below are macOS-y
+        # This is a bit of a goldilocks zone for taking ownership
+        # if there are already files on the volume; the volume is
+        # now mounted, but we haven't added a bunch of new files
+
+        # this is probably a bit slow; I've been seeing 3.3-4s even
+        # when promptly installed over a fresh single-user install.
+        # In case anyone's aware of a shortcut.
+        # `|| true`: .Trashes errors w/o full disk perm
+
+        # rumor per #4488 that macOS 11.2 may not have
+        # sbin on path, and that's where chown is, but
+        # since this bit is cross-platform:
+        # - first try with `command -vp` to try and find
+        #   chown in the usual places
+        #   * to work around some sort of deficiency in
+        #     `command -p` in macOS bash 3.2, we also add
+        #     PATH="$(getconf PATH 2>/dev/null)". As long as
+        #     getconf is found, this should set a sane PATH
+        #     which `command -p` in bash 3.2 appears to use.
+        #     A bash with a properly-working `command -p`
+        #     should ignore this hard-set PATH in favor of
+        #     whatever it obtains internally. See
+        #     github.com/NixOS/nix/issues/5768
+        # - fall back on `command -v` which would find
+        #   any chown on path
+        # if we don't find one, the command is already
+        # hiding behind || true, and the general state
+        # should be one the user can repair once they
+        # figure out where chown is...
+        local get_chr_own="$(PATH="$(getconf PATH 2>/dev/null)" command -vp chown)"
+        if [[ -z "$get_chr_own" ]]; then
+            get_chr_own="$(command -v chown)"
+        fi
+
+        if [[ -z "$get_chr_own" ]]; then
+            reminder <<EOF
+I wanted to take root ownership of existing Nix store files,
+but I couldn't locate 'chown'. (You may need to fix your PATH.)
+To manually change file ownership, you can run:
+    sudo chown -R 'root:$NIX_BUILD_GROUP_NAME' '$NIX_ROOT'
+EOF
+        else
+            _sudo "to take root ownership of existing Nix store files" \
+                  "$get_chr_own" -R "$USER:$NIX_BUILD_GROUP_NAME" "$NIX_ROOT" || true
+        fi
+    fi
+    _sudo "to make the basic directory structure of Nix (part 1)" \
+          install -dv -m 0755 /nix /nix/var /nix/var/log /nix/var/log/nix /nix/var/log/nix/drvs /nix/var/nix{,/db,/gcroots,/profiles,/temproots,/userpool,/daemon-socket} /nix/var/nix/{gcroots,profiles}/per-user
+
+    _sudo "to make the basic directory structure of Nix (part 2)" \
+          install -dv -g "$NIX_BUILD_GROUP_NAME" -m 1775 /nix/store
+
+    _sudo "to place the default nix daemon configuration (part 1)" \
+          install -dv -m 0555 /etc/nix
+}
+
 place_channel_configuration() {
     if [ -z "${NIX_INSTALLER_NO_CHANNEL_ADD:-}" ]; then
         echo "https://nixos.org/channels/nixpkgs-unstable nixpkgs" > "$SCRATCH/.nix-channels"
@@ -1029,6 +1092,52 @@
     trap finish_success EXIT
 }
 
+setupdisk() {
+    check_selinux
+
+    if is_os_darwin; then
+        # shellcheck source=./install-darwin-multi-user.sh
+        . "$EXTRACTED_NIX_PATH/install-darwin-multi-user.sh"
+        check_required_system_specific_settings "install-darwin-multi-user.sh"
+    elif is_os_linux; then
+        # shellcheck source=./install-systemd-multi-user.sh
+        . "$EXTRACTED_NIX_PATH/install-systemd-multi-user.sh" # most of this works on non-systemd distros also
+        check_required_system_specific_settings "install-systemd-multi-user.sh"
+    else
+        failure "Sorry, I don't know what to do on $(uname)"
+    fi
+
+
+    welcome_to_nix
+
+    if ! is_root; then
+        chat_about_sudo
+    fi
+
+    cure_artifacts
+    # TODO: there's a tension between cure and validate. I moved the
+    # the sudo/root check out of validate to the head of this func.
+    # Cure is *intended* to subsume the validate-and-abort approach,
+    # so it may eventually obsolete it.
+    validate_starting_assumptions
+
+    setup_report
+
+    if ! ui_confirm "Ready to continue?"; then
+        ok "Alright, no changes have been made :)"
+        get_help
+        trap finish_cleanup EXIT
+        exit 1
+    fi
+
+    poly_prepare_to_install
+    NIX_BUILD_GROUP_NAME="staff"
+    create_directories_single
+
+    trap finish_success EXIT
+}
+
+
 # set an empty initial arg for bare invocations in case we need to
 # disambiguate someone directly invoking this later.
 if [ "${#@}" = 0 ]; then
@@ -1043,6 +1152,8 @@
     # install == same as the no-arg condition for now (but, explicit)
     ""|install)
         main;;
+    ""|setup-disk)
+        setupdisk;;
     *) # holding space for future options (like uninstall + install?)
         failure "install-multi-user: invalid argument";;
 esac
